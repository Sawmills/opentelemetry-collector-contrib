// Code generated by mdatagen. DO NOT EDIT.

<<<<<<<< HEAD:receiver/datadoglogreceiver/generated_component_test.go
package datadoglogreceiver
========
package ciscoosreceiver
>>>>>>>> df00ae3d478fa1bae7881b20a68abb0a6619a841:receiver/ciscoosreceiver/generated_component_test.go

import (
	"context"
	"testing"

	"github.com/stretchr/testify/require"
	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/component/componenttest"
	"go.opentelemetry.io/collector/confmap/confmaptest"
	"go.opentelemetry.io/collector/consumer/consumertest"
	"go.opentelemetry.io/collector/receiver"
	"go.opentelemetry.io/collector/receiver/receivertest"

	"github.com/open-telemetry/opentelemetry-collector-contrib/receiver/datadoglogreceiver/internal/metadata"
)

<<<<<<<< HEAD:receiver/datadoglogreceiver/generated_component_test.go
========
var typ = component.MustNewType("ciscoosreceiver")

>>>>>>>> df00ae3d478fa1bae7881b20a68abb0a6619a841:receiver/ciscoosreceiver/generated_component_test.go
func TestComponentFactoryType(t *testing.T) {
	require.Equal(t, "datadoglog", NewFactory().Type().String())
}

func TestComponentConfigStruct(t *testing.T) {
	require.NoError(t, componenttest.CheckConfigStruct(NewFactory().CreateDefaultConfig()))
}

func TestComponentLifecycle(t *testing.T) {
	factory := NewFactory()

	tests := []struct {
		name     string
		createFn func(ctx context.Context, set receiver.Settings, cfg component.Config) (component.Component, error)
	}{
		{
<<<<<<<< HEAD:receiver/datadoglogreceiver/generated_component_test.go
			name: "logs",
			createFn: func(ctx context.Context, set receiver.Settings, cfg component.Config) (component.Component, error) {
				return factory.CreateLogs(ctx, set, cfg, consumertest.NewNop())
========
			name: "metrics",
			createFn: func(ctx context.Context, set receiver.Settings, cfg component.Config) (component.Component, error) {
				return factory.CreateMetrics(ctx, set, cfg, consumertest.NewNop())
>>>>>>>> df00ae3d478fa1bae7881b20a68abb0a6619a841:receiver/ciscoosreceiver/generated_component_test.go
			},
		},
	}

	cm, err := confmaptest.LoadConf("metadata.yaml")
	require.NoError(t, err)
	cfg := factory.CreateDefaultConfig()
	sub, err := cm.Sub("tests::config")
	require.NoError(t, err)
	require.NoError(t, sub.Unmarshal(&cfg))

	for _, test := range tests {
		t.Run(test.name+"-shutdown", func(t *testing.T) {
			settings := receivertest.NewNopSettings(metadata.Type)
			settings.ID = component.NewID(typeStr)

			c, err := test.createFn(context.Background(), settings, cfg)
			require.NoError(t, err)
			err = c.Shutdown(context.Background())
			require.NoError(t, err)
		})
		t.Run(test.name+"-lifecycle", func(t *testing.T) {
			settings := receivertest.NewNopSettings(metadata.Type)
			settings.ID = component.NewID(typeStr)

			firstRcvr, err := test.createFn(context.Background(), settings, cfg)
			require.NoError(t, err)
			host := componenttest.NewNopHost()
			require.NoError(t, err)
			require.NoError(t, firstRcvr.Start(context.Background(), host))
			require.NoError(t, firstRcvr.Shutdown(context.Background()))
			secondRcvr, err := test.createFn(context.Background(), settings, cfg)
			require.NoError(t, err)
			require.NoError(t, secondRcvr.Start(context.Background(), host))
			require.NoError(t, secondRcvr.Shutdown(context.Background()))
		})
	}
}
